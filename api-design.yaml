openapi: 3.0.0
info:
  title: Bibilary API
  version: 1.0.0
  description: An API for managing a library system
servers:
  - url: http://api.bibilary.com/api
paths:
  /login:
    post:
      summary: Log in a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}:
    get:
      summary: Get user information
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Update user information
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}/edit-pass:
    patch:
      summary: Update user password
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user_data:
    get:
      summary: Get all user data (for admin)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /{userId}/albums:
    get:
      summary: Get a user's albums
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      summary: Create a new album for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAlbum'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
  /album/{albumId}:
    get:
      summary: Get a user's album by ID
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
  /{userId}/edit-album/{albumId}:
    patch:
      summary: Update a user's album
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: albumId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbum'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
  /{userId}/albums/{albumId}/info:
    get:
      summary: Get album information
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: albumId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumInfo'
  /{userId}/albums/{albumId}/delete:
    delete:
      summary: Delete a user's album
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: albumId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
  /albums:
    get:
      summary: Get all albums
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
  /{userId}/album/{albumId}/songs:
    get:
      summary: Get songs in an album
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: albumId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
  /{userId}/song:
    post:
      summary: Create a new song
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSong'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
  /song/{songId}:
    get:
      summary: Get a song by ID
      parameters:
        - name: songId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
  /{userId}/edit-song/{songId}:
    patch:
      summary: Update a song
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: songId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSong'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
  /{userId}/songs/{songId}/delete:
    delete:
      summary: Delete a song
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: songId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
  /{userId}/playlists:
    get:
      summary: Get a user's playlists
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
    post:
      summary: Create a new playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPlaylist'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /{userId}/edit-playlist/{playlistId}:
    patch:
      summary: Update a playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlaylist'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /{userId}/playlist/{playlistId}:
    get:
      summary: Get a playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /{userId}/{playlistId}/add_songs:
    post:
      summary: Add songs to a playlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: playlistId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Song'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /{userId}/rate/{songId}:
    post:
      summary: Rate a song
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: songId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
  /{userId}/flag:
    post:
      summary: Flag content
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flag'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
  /flags:
    get:
      summary: Get all flags (admin)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flag'
  /flags/{flagId}:
    delete:
      summary: Delete a flag (admin)
      parameters:
        - name: flagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
  /{userId}/albums/upload-image:
    post:
      summary: Upload an album image
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AlbumImage'
      responses:
        '201':
          description: Successful upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
  /{userId}/songs/upload-image:
    post:
      summary: Upload a song image
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SongImage'
      responses:
        '201':
          description: Successful upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UpdateUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
    ChangePassword:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
    Album:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        user_id:
          type: integer
    NewAlbum:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
    UpdateAlbum:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    AlbumInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        user_id:
          type: integer
    Song:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        artist:
          type: string
        album_id:
          type: integer
        file_path:
          type: string
    NewSong:
      type: object
      required:
        - title
        - artist
        - album_id
      properties:
        title:
          type: string
        artist:
          type: string
        album_id:
          type: integer
    UpdateSong:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
    Playlist:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        user_id:
          type: integer
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    NewPlaylist:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    UpdatePlaylist:
      type: object
      properties:
        name:
          type: string
    Rating:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        song_id: